{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0468e5fd",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'loaders'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpathlib\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Path\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mloaders\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'loaders'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "from loaders import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8a93ae54",
   "metadata": {},
   "outputs": [],
   "source": [
    "hamida_layer1 = Path('layer_shapes/Hamida/Hamida_layer1.yaml') \n",
    "alexnet_layer1 = Path('layer_shapes/AlexNet/AlexNet_layer1.yaml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "beb12130",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ERT:\n",
      "  version: 0.3\n",
      "  tables:\n",
      "  - name: single_pe_arch.DRAM\n",
      "    actions:\n",
      "    - name: read\n",
      "      arguments: null\n",
      "      energy: 512\n",
      "    - name: write\n",
      "      arguments: null\n",
      "      energy: 512\n",
      "    - name: idle\n",
      "      arguments: null\n",
      "      energy: 0\n",
      "  - name: single_pe_arch.chip.PE.scratchpad\n",
      "    actions:\n",
      "    - name: read\n",
      "      arguments: null\n",
      "      energy: 0.2256\n",
      "    - name: write\n",
      "      arguments: null\n",
      "      energy: 0.2256\n",
      "  - name: single_pe_arch.chip.PE.mac\n",
      "    actions:\n",
      "    - name: compute\n",
      "      arguments: null\n",
      "      energy: 3.275\n",
      "  - name: single_pe_arch.chip.PE.weight_reg\n",
      "    actions:\n",
      "    - name: access\n",
      "      arguments: null\n",
      "      energy: 0.009\n",
      "  - name: single_pe_arch.chip.PE.input_activation_reg\n",
      "    actions:\n",
      "    - name: access\n",
      "      arguments: null\n",
      "      energy: 0.009\n",
      "  - name: single_pe_arch.chip.PE.output_activation_reg\n",
      "    actions:\n",
      "    - name: access\n",
      "      arguments: null\n",
      "      energy: 0.009\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result = run_accelergy(ConfigRegistry.SINGLE_PE_ARCH, ConfigRegistry.SINGLE_PE_COMPONENTS_DIR)\n",
    "print(result.ert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4db2465e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input file: tmp.yaml\n",
      "Warning: neither block size nor cluster size specified, set according to specified storage width: block size: 1  cluster-size: 1\n",
      "Warning: neither block size nor cluster size specified, set according to specified storage width: block size: 1  cluster-size: 1\n",
      "Warning: neither block size nor cluster size specified, set according to specified storage width: block size: 1  cluster-size: 1\n",
      "Warning: neither block size nor cluster size specified, set according to specified storage width: block size: 1  cluster-size: 1\n",
      "execute:/usr/local/bin/accelergy tmp.yaml --oprefix timeloop-model. -o ./ > timeloop-model.accelergy.log 2>&1\n",
      "[ERROR] 2023-04-21 18:58:45,628 - pytimeloop.app.model - Could not find timeloop-model.stats.txt\n",
      "[ERROR] 2023-04-21 18:58:45,630 - pytimeloop.app.model - Could not find timeloop-model.map.txt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: Interpreting 0 to mean full problem dimension instead of residue.\n",
      "WARNING: parsing mapping: permutation contains insufficient dimensions at level: output_activation_reg (temporal), padding with arbitrary order.\n",
      "WARNING: parsing mapping: permutation contains insufficient dimensions at level: input_activation_reg (temporal), padding with arbitrary order.\n",
      "WARNING: parsing mapping: permutation contains insufficient dimensions at level: weight_reg (temporal), padding with arbitrary order.\n",
      "WARNING: parsing mapping: permutation contains insufficient dimensions at level: scratchpad (temporal), padding with arbitrary order.\n",
      "WARNING: parsing mapping: permutation contains insufficient dimensions at level: DRAM (temporal), padding with arbitrary order.\n",
      "ERROR: couldn't map level scratchpad: mapped tile size 27 exceeds buffer capacity 18\n"
     ]
    }
   ],
   "source": [
    "small_layer_stats, small_layer_mapping = run_timeloop_model(\n",
    "    ConfigRegistry.SINGLE_PE_ARCH, ConfigRegistry.SINGLE_PE_COMPONENTS_DIR,\n",
    "    ConfigRegistry.SINGLE_PE_MAP,\n",
    "    hamida_layer1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75192477",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
